# description: application context

# command line applications and sections to delete after load
[cli]
apps = list: ${cli_config_default:apps}, show_config_cli,
  ${cli_deeplearn_default:apps}, ${cli_deepnlp_default:apps}, deepnlp_fac_text_classify_app,
  cleaner_cli, app, finetune_app
cleanups = list: ${cli_config_default:cleanups}, show_config_cli,
  ${cli_deeplearn_default:cleanups}, ${cli_deepnlp_default:cleanups}, deepnlp_fac_text_classify_app,
  cleaner_cli, app, finetune_app
cleanup_removes = set: log_cli, cleaner_cli

# [log_cli]
# loggers = dict: {'zensols.db': 'debug'}

# clean 
[cleaner_cli]
paths = eval: (
  ('${default:temporary_dir}', '*.log', '**/__pycache__'),
  ('results',),
  ('${default:data_dir}', 'corpus/feature_resource', 'corpus/dataset-row-ids'))

# set the default embeddding
[override_cli_decorator]
option_overrides = dict: {'override': {'default': 'edusenti_default.lang=sq'}}

# set the default clean level to remove everything but the downloaded corpus
[cleaner_cli_decorator]
option_overrides = dict: {'clean_level': {'default': 1}}

# import command line apps
[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf,
    resource(zensols.deeplearn): resources/cli.conf,
    resource(zensols.deepnlp): resources/cli.conf,
    resource(zensols.deepnlp): resources/cleaner.conf

# import the `imp_conf` while leaving default and escape sections available to
# the remainder of the config loading process
[config_import]
references = list: default
sections = list: app_imp_conf

# first load overrides to enable setting defaults, then load the (usually model
# specific) configuration defining anything used in later configuration
[app_imp_conf]
type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
config_files = list:
    ^{config_path},
    ^{override},
    resource(uic.edusenti): resources/default.conf,
    resource(zensols.deeplearn): resources/default.conf,
    resource(zensols.deepnlp): resources/default.conf,
    resource(uic.edusenti): resources/default.conf,
    ^{config_path},
    ^{override},
    resource(zensols.deeplearn): resources/obj.conf,
    resource(zensols.deeplearn): resources/observer.conf,
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/component.conf,
    resource(zensols.deepnlp): resources/obj.conf,
    resource(zensols.deepnlp): resources/classify.conf,
    resource(zensols.deepnlp): resources/feature.conf,
    resource(zensols.deepnlp): resources/transformer.conf,
    resource(zensols.deepnlp): resources/transformer-sent.conf,
    resource(uic.edusenti): resources/obj.yml,
    resource(uic.edusenti): resources/finetune.yml,
    ^{config_path},
    ^{override}

[app]
class_name = uic.edusenti.Application

[app_decorator]
option_excludes = set: config_factory

[finetune_app]
class_name = uic.edusenti.FineTuneApplication
corpus_compiler = instance: edusent_finetune_corpus_compiler
corpus_dumper = instance: edusent_finetune_corpus_dumper
cleaner = instance: edusent_finetune_cleaner
corpus = instance: edusent_finetune_corpus
tokenizer_trainer = instance: edusent_finetune_token_trainer
model_trainer = instance: edusent_finetune_model_trainer

[finetune_app_decorator]
mnemonic_overrides = dict: {
  'print_stats': 'finestats',
  'compile_finetuned': 'finecomp',
  'dump': 'finedump',
  'compile_dataset': 'finedscomp',
  'write_corpus_stats': 'finestats',
  'clear_models': 'fineclean',
  'train_tokenizer': 'finetraintok',
  'train_model': 'finetrainmodel'}
option_excludes = set:
  config_factory, corpus_compiler, corpus_dumper,
  tokenizer_trainer, model_trainer, cleaner, corpus
